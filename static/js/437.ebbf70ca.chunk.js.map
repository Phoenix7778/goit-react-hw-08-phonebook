{"version":3,"file":"static/js/437.ebbf70ca.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/contactsFilter/ContactsFilter.styled.js","components/contactsFilter/ContactsFilter.jsx","components/contactsList/ContactsList.jsx","components/contactsForm/ContactsForm.styled.js","components/contactsForm/ContactsForm.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filter;\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  margin-bottom: 15px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  margin-left: 15px;\n  width: 300px;\n  border-radius: 4px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onChangeValue } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input, Label } from './ContactsFilter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  let value = useSelector(selectFilter);\n\n  return (\n    <>\n      <Label>Find contacts by name </Label>\n      <Input\n        type=\"text\"\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={e => dispatch(onChangeValue(e.target.value))}\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeValue: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const filterContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ul>\n      {filterContacts.map(contact => (\n        <li\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            width: '350px',\n            justifyContent: 'space-between',\n          }}\n          key={contact.id}\n          contact={contact}\n        >\n          <p>\n            {contact.name}: {contact.number}\n          </p>\n          <button\n            style={{\n              padding: '5px',\n              width: '100px',\n              height: '30px',\n              borderRadius: '4px',\n              cursor: 'pointer',\n            }}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n`;\n\nexport const Button = styled.button`\n  padding: 5px;\n  border-radius: 4px;\n  width: 120px;\n  cursor: pointer;\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addNewContact } from 'redux/contacts/operations';\nimport { Label, Input, Button } from './ContactsForm.styled';\n\nexport const ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    const exist = contacts.find(\n      item => item.name.toLowerCase() === name.toLowerCase()\n    );\n    exist\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addNewContact({ name, number }));\n    onReset();\n  };\n\n  const onReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        border: '1px solid black',\n        width: '500px',\n        padding: '20px',\n        gap: '20px',\n        marginBottom: '30px',\n      }}\n      action=\"\"\n      onSubmit={onSubmit}\n    >\n      <Label htmlFor=\"\" name=\"name\">\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={onChange}\n          required\n        />\n      </Label>\n\n      <Label htmlFor=\"\" name=\"number\">\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={onChange}\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\" onSubmit={onSubmit}>\n        Add contact\n      </Button>\n    </form>\n  );\n};\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/contactsFilter/ContactsFilter';\nimport { ContactsList } from 'components/contactsList/ContactsList';\nimport { ContactsForm } from 'components/contactsForm/ContactsForm';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactsForm />\n      <div>{isLoading && 'Loading...'}</div>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","Label","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Filter","dispatch","useDispatch","value","useSelector","_jsxs","_Fragment","children","_jsx","type","pattern","onChange","e","onChangeValue","target","ContactsList","filterContacts","contact","name","toLowerCase","includes","map","style","display","alignItems","width","justifyContent","number","padding","height","borderRadius","cursor","onClick","deleteContact","id","Button","_templateObject3","ContactsForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","event","_event$currentTarget","currentTarget","onSubmit","preventDefault","find","item","alert","concat","addNewContact","onReset","flexDirection","border","gap","marginBottom","action","htmlFor","title","required","ContactsPage","useEffect","fetchContacts","Helmet"],"sourceRoot":""}